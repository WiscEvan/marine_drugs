#!/usr/bin/env bash


# First requires install autometa...
# Can do by cloning and installing manually or through conda.
# If manually installing Autometa, you will also need to install env. 

email="erees@wisc.edu"

template="$HOME/marine_drugs/marine_drugs/src/features/template.mf"
features="$HOME/marine_drugs/marine_drugs/src/features"
metagenomes=`ls $HOME/marine_drugs/marine_drugs/data/raw/assemblies/*.fasta`
interim="$HOME/marine_drugs/marine_drugs/data/interim"
filtered_assemblies="${interim}/assemblies"
binnings="${interim}/binning"
kmer_norm="ilr"
kmer_embed="bhsne"

batch="${features}/run_makeflows.sh"
# overwrite if it already exists...
if [ -f $batch ];then
    echo "Removing existing ${batch}"
    rm $batch
fi

cat > $batch <<- EOM
#!/bin/bash
#SBATCH --partition=queue
#SBATCH --time=14-00:00:00
#SBATCH -N 1 # Nodes
#SBATCH -n 1 # Tasks
#SBATCH --cpus-per-task=1
#SBATCH --error=%J.run_makeflows.err
#SBATCH --output=%J.run_makeflows.out

# Sponge Makeflows generated by
# $HOME/marine_drugs/marine_drugs/src/make_sponge_makeflows.sh


EOM


logs="${binnings}/logs"

if [ ! -d $logs ];then
    mkdir -p $logs
fi

# example: ${mg} == "FL2015_4.fasta"
for mg in $metagenomes;do
    metagenome=$(basename ${mg/.fasta/})
    makeflow="${features}/${metagenome}.mf"
    # Copy template.mf to FL2015_4.mf
    cp ${template} ${makeflow}
    # edit FL2015_4.mf inputs and outputs filepaths
    sed -i "s,metagenome.fasta,${mg},g" ${makeflow}
    # FILTERED
    filtered_assembly="${filtered_assemblies}/${metagenome}.filtered.fna"
    sed -i "s,metagenome.filtered.fna,${filtered_assembly},g" ${makeflow}
    # KMERS
    kmers="${binnings}/${metagenome}.kmers."
    sed -i "s,kmers\.,${kmers},g" ${makeflow}
    # COVERAGES
    coverages="${binnings}/${metagenome}.coverages."
    sed -i "s,coverages\.,${coverages},g" ${makeflow}
    # ORFS
    orfs="${binnings}/${metagenome}.orfs."
    sed -i "s,orfs\.,${orfs},g" ${makeflow}
    # TAXONOMY
    taxonomy="${binnings}/${metagenome}.taxonomy."
    sed -i "s,taxonomy\.,${taxonomy},g" ${makeflow}
    # BACTERIA HMMSCAN
    hmmscan="${binnings}/${metagenome}.bacteria.hmmscan."
    sed -i "s,bacteria\.hmmscan\.,${hmmscan},g" ${makeflow}
    # ARCHAEA HMMSCAN
    hmmscan="${binnings}/${metagenome}.archaea.hmmscan."
    sed -i "s,archaea\.hmmscan\.,${hmmscan},g" ${makeflow}
    # BACTERIA MARKERS
    markers="${binnings}/${metagenome}.bacteria.markers."
    sed -i "s,bacteria\.markers\.,${markers},g" ${makeflow}
    # ARCHAEA MARKERS
    markers="${binnings}/${metagenome}.archaea.markers."
    sed -i "s,archaea\.markers\.,${markers},g" ${makeflow}
    # BACTERIA BINNING
    binning="${binnings}/${metagenome}.bacteria.binning."
    sed -i "s,bacteria\.binning\.,${binning},g" ${makeflow}
    # ARCHAEA BINNING
    binning="${binnings}/${metagenome}.archaea.binning."
    sed -i "s,archaea\.binning\.,${binning},g" ${makeflow}
    # BACTERIA UNCLUSTERED RECRUITMENT
    binning="${binnings}/${metagenome}.bacteria.binning."
    sed -i "s,bacteria\.binning\.,${binning},g" ${makeflow}
    # ARCHAEA UNCLUSTERED RECRUITMENT
    binning="${binnings}/${metagenome}.archaea.binning."
    sed -i "s,archaea\.binning\.,${binning},g" ${makeflow}


    summarylog="${logs}/${metagenome}.summary.log"
    sponge_batch="${features}/run_${metagenome}_makeflow.sh"
    # overwrite if it already exists...
    if [ -f $sponge_batch ];then
        echo "Removing existing ${sponge_batch}"
        rm $sponge_batch
    fi

    cat >> $sponge_batch <<- EOM
#!/bin/bash
#SBATCH --partition=queue
#SBATCH --time=14-00:00:00
#SBATCH -N 1 # Nodes
#SBATCH -n 1 # Tasks
#SBATCH --cpus-per-task=1
EOM
    slurm_stderr="#SBATCH --error=%J.run_${metagenome}_makeflow.err"
    slurm_stdout="#SBATCH --output=%J.run_${metagenome}_makeflow.err"
    echo $slurm_stderr >> $sponge_batch
    echo $slurm_stdout >> $sponge_batch
    cat >> $sponge_batch <<- EOM
# Sponge Makeflows generated by
# $HOME/marine_drugs/marine_drugs/src/make_sponge_makeflows.sh

EOM
    command="makeflow --email=${email} --summary-log=${summarylog} --monitor=${logs} -T slurm ${makeflow} &"
    echo ${command} >> ${batch}
    echo ${command/&/} >> ${sponge_batch}


done

echo "wait" >> ${batch}